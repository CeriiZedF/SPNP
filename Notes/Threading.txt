                                        Паралельне (асинхронне) програмування 
                                            Частина 1. Багатопоточність

    Вступ.
У залежності від послідовності виконання інструкцій у коді програмування поділяють на синхронне та асинхронне.
У синхронному режимі код виконується послідовно, інструкція за інструкцією.
--------- ------  ---- ----------   ---------  -- -    -- - ----------
Асинхронний режим передбачає непослідовне виконання, коли за певний проміжок
часу виконуються декілька інструкцій
----------        ------    -------        |--------                        ------
   ----------           -------------      |                      --------
      ------------                 --------|        --------------                --------



Асинхронність реалізується через:
  -  багатозадачнітсь: рівень мови (платформи) з об'єктами Task (Promise, Future...)
  -  багатопоточність: рівень OC, надання ресурсів типу Thread (потік)
  -  багатопроцесорність: рівень ОС, процес "вище" потоків - окремі запуски програм
  -  мережні технології (grid-, network technologies)

                                                Багатопоточність.

Потік - "Послідовність коду", черга, конвеєе, яка здатна виконуватись паралельно з іншими потоками.
Потік утворюється на функції/методі, який нічого не повертає та приймає один або жодному аргументу

UI -------- PB -------- Start() -------- PB ---------                                       PB - Progress Bar          Invoke - 

New Thread          ----------PB.VAl=10 -> Exception 

UI -------- PB -------- Start() -------- PB ---- {PB.VAl=10} ----- {PB.Val=20}------

new Thread          ----------Invoke(PB.Val=10)-------Invoke(PB.Val=20) -> нормально

Конкуренція потоків: звертання до одного адресу пам'яті одночасно.
Виникає коли використовується звичайні змінні (пол класу).
Частково вирішується створенням аксессорів (гет, сет) - властивостей.
(частково - для однієї операції: x = 10 -- OK, x += 10 -- NO [get + 10 - get])

Токени скасування 
                        Основний потік
                        CTS - джерело
               CTS.Token          CTS.Token
                    |                  |                скасування буде поширене на всі токени з данного джерела
                    |  /<cts.Cancel>\  |                cts.Cancel - Command Activated
                Потік 1             Потік 2